temp
temp <- gsub(temp, "poly", "F. polyctena")
temp <- agitation_tests$treatment
temp <- gsub("poly", "F. polyctena", temp)
temp
temp <- agitation_tests$treatment
temp <- gsub(".*poly.*", "F. polyctena", temp)
temp
temp <- gsub(".*Fs.*", "F. sanguinea", temp)
temp
temp <- gsub(".*P1.*", "F. polyctena", temp)
temp <- gsub(".*Fp.*", "F. polyctena", temp)
temp <- gsub(".*Fr.*", "F. polyctena", temp)
temp
agitation_tests$treatment <- temp
usethis::use_data(agitation_tests)
usethis::use_data(agitation_tests, overwrite = TRUE)
head(agitstion_tests)
head(agitation_tests)
unique(agiatation_tests$territory)
unique(agitatation_tests$territory)
unique(agitation_tests$territory)
agitation_tests$territory <- as.factor(agitation_tests$territory)
agitation_tests$territory[1]
agitation_tests$territory[1] <- "T"
levels(agitation_tests$territory)[1]
levels(agitation_tests$territory)[1] <- "B"
levels(agitation_tests$territory)[2] <- "T"
colnames(agitation_tests)
colnames(agitation_tests)[10]
agiatation_test<- agitation_tests[,-10]
head(agitation_tests)
agiatation_tests<- agitation_tests[,-10]
head(agitation_tests)
agitation_tests<- agitation_tests[,-10]
head(agitation_tests)
usethis::use_data(agitation_tests, overwrite = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Load dataset
# data("agitation_tests")
# summarize duration of aggressive behaviour over the experiment
agitation_tests_summary <- group_by(agitation_tests, colony, treatment) %>%
summarise(aggression_duration=sum(aggression_duration)) %>%
left_join(distinct(select(agitation_tests, colony, territory)))
# difference in aggression toward F. polyctena between colonies located within and
# outside rufa territory
x<-filter(agitation_tests_summary, species=="F. polyctena", territory=="B")$aggression_duration
devtools::check()
devtools::document()
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
usethis::use_vignette("Statistical tests")
usethis::use_vignette("Statistical_tests")
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
temp <- as.Date("2020-12-31")
class(temp)
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
devtools::document()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::document()
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
devtools::load_all()
data("aggression_probing_tests")
colnames(aggression_probing_tests)
?chisq.test
devtools::document()
model_data <-transform_to_sigle_val(data = aggression_probing_tests, column = "actual_fus_numb")
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature),
treatment!="sanguinea_20")
colnames(model_data)
aggression_records <- filter(model_data, aggression_num > 0)
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
Test = model_data$test_ID[i]
interval = model_data$time_elapsed[i]
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, Test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
Test = model_data$test_ID[i]
interval = model_data$time_elapsed[i]
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
model_data <- new_dataset
model_data$temperature <- model_data$temperature - mean(model_data$temperature)
model_data$temperature<-model_data$temperature/sd(model_data$temperature)
model_data$temperature
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
devtools::check()
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
model_data$temperature
log10(model_data$temperature)
model_data$temperature <- model_data$temperature - min(model_data$temperature) + 1
# temperature transformation: normalize standard deviation
model_data$temperature <- model_data$temperature/sd(model_data$temperature)
log10(model_data$temperature)
mixed.model.temp<-glmer(actual_fus_numb ~ temperature + (1|colony) + territory +
I(log10(time)), data=model_data, family="poisson")
library(lme4)
library(lmerTest)
library(DHARMa)
mixed.model.temp<-glmer(actual_fus_numb ~ temperature + (1|colony) + territory +
I(log10(time)), data=model_data, family="poisson")
mixed.model.temp<-glmer(actual_fus_numb ~ temperature + (1|colony) + territory +
I(log10(time_elapsed)), data=model_data, family="poisson")
summary(mixed.model.temp)
sim.resid <- simulateResiduals(mixed.model.temp)
plot(sim.resid)
model_data
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
model_data <-transform_to_sigle_val(data = aggression_probing_tests, column = "actual_fus_numb")
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature),
treatment!="sanguinea_20")
aggression_records <- filter(model_data, aggression_num > 0)
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
Test = model_data$test_ID[i]
interval = model_data$time_elapsed[i]
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
model_data <- new_dataset
model_data$temperature <- model_data$temperature - min(model_data$temperature) + 1
sd(model_data$temperature)
temp <- sd(model_data$temperature)
10^0.15852
?simulateResiduals
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
10^0.15852
temp
exp(0.15852)
exp(0.15852/temp)
exp(0.15852/temp)^10
mixed.model.temp
fixef(mixed.model.temp)
fixef(mixed.model.temp)$temperature
fixef(mixed.model.temp)['temperature']
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
devtools::check()
?devtools::install_github
devtools::install_github("TomVuod/fusca_counteradaptation", build_vignettes = TRUE)
vignette(package = "fusca.defence")
usethis::use_vignette("Statistical_tests")
devtools::install_github("TomVuod/fusca_counteradaptation", build_vignettes = TRUE)
vignette("Statistical_tests", package = "fusca.defence")
library(lme4)
library(lmerTest)
library(DHARMa)
model_data <-transform_to_sigle_val(raw_data = aggression_probing_tests, column = "actual_fus_numb")
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature),
treatment!="sanguinea_20")
aggression_records <- filter(model_data, aggression_num > 0)
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
Test = model_data$test_ID[i]
interval = model_data$time_elapsed[i]
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
model_data <- new_dataset
# temperature transformation: center at zero
model_data$temperature <- model_data$temperature - min(model_data$temperature) + 1
# temperature transformation: normalize standard deviation
sd_temperature <- sd(model_data$temperature)
model_data$temperature <- model_data$temperature/sd_temperature
# fit generalized linear model; use log10 transform of the temperature
mixed.model.activity<-glmer(actual_fus_numb ~ temperature + (1|colony) + territory +
I(log10(time_elapsed)), data=model_data, family="poisson")
summary(mixed.model.activity)
devtools::load_all()
library(lme4)
library(lmerTest)
library(DHARMa)
model_data <-transform_to_sigle_val(raw_data = aggression_probing_tests, column = "actual_fus_numb")
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature),
treatment!="sanguinea_20")
aggression_records <- filter(model_data, aggression_num > 0)
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
Test = model_data$test_ID[i]
interval = model_data$time_elapsed[i]
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
model_data <- new_dataset
# temperature transformation: center at zero
model_data$temperature <- model_data$temperature - min(model_data$temperature) + 1
# temperature transformation: normalize standard deviation
sd_temperature <- sd(model_data$temperature)
model_data$temperature <- model_data$temperature/sd_temperature
# fit generalized linear model; use log10 transform of the temperature
mixed.model.activity<-glmer(actual_fus_numb ~ temperature + (1|colony) + territory +
I(log10(time_elapsed)), data=model_data, family="poisson")
summary(mixed.model.activity)
set.seed(1010)
sim.resid <- simulateResiduals(mixed.model.activity, n = 1000)
plot(sim.resid)
plot(sim.resid,width=10)
logistic.model.res <- filter(aggression_probing_tests, date>as.Date("2019-01-01"), territory %in% (c("B", "T"))) %>%
transform_to_sigle_val() %>%
split(.$test_ID) %>%
purrr::map(process_test_data) %>%
do.call(rbind, .) %>%
filter(is.finite(ant_number)) %>%
mutate(aggression_presence = ant_number > 0) %>%
glmer(aggression_presence ~ treatment + territory + (1|colony), data = ., family = "binomial")
summary(logistic.model.res)
plot(simulateResiduals(logistic.model.res, n = 1000))
knitr::opts_chunk$set(echo = TRUE)
set.seed(1010)
sim.resid <- simulateResiduals(mixed.model.activity, n = 1000)
plot(sim.resid)
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
file.exists("vignettes/max_activity_diagnostics.png")
file.exists("/vignettes/max_activity_diagnostics.png")
file.exists("./vignettes/max_activity_diagnostics.png")
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
devtools::install(build_vignettes = TRUE)
vignette("Statistical_tests", package = "fusca.defence")
devtools::build_rmd("vignettes/Statistical_tests.Rmd")
x <- rpois(100, runif(100)*10)
y <- rpois(100, runif(100)*10)
lambda <- runif(100)*10
y <- rpois(100, lambda)
x <- rpois(100, lambda)
cor(x,y)
lambda <- runif(100)*5
x <- rpois(100, lambda)
y <- rpois(100, lambda)
cor(x,y)
devtools::load_all()
data(package = "fusca.defence")
head(aggression_probing_tests)
library(dplyr)
later_tests <- fliter(aggression_probing_tests, date > as.Date("2018-12-30"))
later_tests <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
later_tests
head(later_tests)
later_tests <- split(later_tests, later_tests$test_ID)
active_fusca <- lapply(later_tests, function(x) data.frame(treatment = x$treatment[1], activity = sum((actual_fus_numb + aggression_num)>0), test_ID = x$test_ID[1], date = x$date[1]))
active_fusca <- lapply(later_tests, function(x) data.frame(treatment = x$treatment[1], activity = sum((x$actual_fus_numb + x$aggression_num)>0), test_ID = x$test_ID[1], date = x$date[1]))
warnings()
aggression_probing_tests <- transform_to_single_val(aggression_probing_tests, mode = 2)
aggression_probing_tests <- transform_to_single_val(aggression_probing_tests, column = "actual_fus_numb",mode = 2)
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set <- split(second_set, second_set$test_ID)
active_fusca <- lapply(second_set, function(x) data.frame(treatment = x$treatment[1], activity = sum((x$actual_fus_numb + x$aggression_num)>0), test_ID = x$test_ID[1], date = x$date[1]))
active_fusca
active_fusca <- do.call(rbind, active_fusca)
active_fusce
active_fusca
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set$actual_fus_numb
second_set$actual_fus_numb[is.na(second_set$actual_fus_numb)] <- 0
second_set <- split(second_set, second_set$test_ID)
active_fusca <- lapply(second_set, function(x) data.frame(treatment = x$treatment[1], activity = sum((x$actual_fus_numb + x$aggression_num)>0), test_ID = x$test_ID[1], date = x$date[1]))
active_fusca <- do.call(rbind, active_fusca)
active_fusca
second_set$actual_fus_numb
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set$actual_fus_numb[is.na(second_set$actual_fus_numb)] <- 0
second_set$actual_fus_numb
active_fusca <- lapply(second_set, function(x) data.frame(treatment = x$treatment[1], activity = sum((x$actual_fus_numb + x$aggression_num)>0), test_ID = x$test_ID[1], date = x$date[1]))
second_set <- split(second_set, second_set$test_ID)
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set$actual_fus_numb[is.na(second_set$actual_fus_numb)] <- 0
second_set$aggression_num
second_set$aggression_num[is.na(second_set$aggression_numb)] <- 0
second_set <- split(second_set, second_set$test_ID)
active_fusca <- lapply(second_set, function(x) data.frame(treatment = x$treatment[1], activity = sum((x$actual_fus_numb + x$aggression_num)>0), test_ID = x$test_ID[1], date = x$date[1]))
active_fusca <- do.call(rbind, active_fusca)
active_fusca
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set$actual_fus_numb[is.na(second_set$actual_fus_numb)] <- 0
second_set$aggression_num[is.na(second_set$aggression_numb)] <- 0
second_set <- split(second_set, second_set$test_ID)
active_fusca <- lapply(second_set, function(x) data.frame(treatment = x$treatment[1], activity = sum((x$actual_fus_numb + x$aggression_num)>0), test_ID = x$test_ID[1], date = x$date[1]))
active_fusca <- do.call(rbind, active_fusca)
active_fusce
active_fusca
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set$actual_fus_numb[is.na(second_set$actual_fus_numb)] <- 0
second_set$aggression_num[is.na(second_set$aggression_numb)] <- 0
second_set$aggression_num
second_set$aggression_num[is.na(second_set$aggression_numb)] <- 0
second_set$aggression_num
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set$actual_fus_numb[is.na(second_set$actual_fus_numb)] <- 0
second_set$aggression_num[is.na(second_set$aggression_num)] <- 0
second_set <- split(second_set, second_set$test_ID)
active_fusca <- lapply(second_set, function(x) data.frame(treatment = x$treatment[1], activity = sum((x$actual_fus_numb + x$aggression_num)>0), test_ID = x$test_ID[1], date = x$date[1]))
active_fusca <- do.call(rbind, active_fusca)
active_fusca
active_fusca[active_fusca$activity==0,]
active_fusca[active_fusca$test_ID %in% active_fusca[active_fusca$activity==0,test_ID],]
active_fusca[active_fusca$test_ID %in% active_fusca[active_fusca$activity==0,"test_ID"],]
colnames(aggression_probing_tests)
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set$actual_fus_numb[is.na(second_set$actual_fus_numb)] <- 0
second_set$aggression_num[is.na(second_set$aggression_num)] <- 0
second_set <- split(second_set, second_set$test_ID)
active_fusca <- lapply(second_set, function(x) data.frame(treatment = x$treatment[1],
activity = sum((x$actual_fus_numb + x$aggression_num)>0),
test_ID = x$test_ID[1],
date = x$date[1],
colony = x$colony[1]))
active_fusca <- do.call(rbind, active_fusca)
active_fusca[active_fusca$colony %in% active_fusca[active_fusca$activity==0,"colony"],]
arrange(active_fusca[active_fusca$colony %in% active_fusca[active_fusca$activity==0,"colony"],], colony)
sink("colony_activity.txt")
arrange(active_fusca[active_fusca$colony %in% active_fusca[active_fusca$activity==0,"colony"],], colony)
sink()
id_remove <- active_fusca[active_fusca$activity==0,"test_ID"]
devtools::load_all()
id_removw
id_remove
transform_to_single_val
knitr::opts_chunk$set(echo = TRUE)
library(fusca.defence)
# Load data with the results of the aggression test - basic variant
data("aggression_probing_tests")
id_remove <- c(154, 162, 169)
aggression_probing_tests <- aggression_probing_tests[!(aggression_probing_tests$test_ID %in% id_remove),]
# For experiments with the use of 20 F. sanguinea ants introduced into arena around F. fusca nest
# T - within territory, B - beyond territory
# Colonies are classified according to the maximal number of aggressive ants exceeding
# threshold number
chi_sq_test(treatment_ = "sanguinea_20")
# The same as above but for treatment with the use of a signle F. sanguinea ant
chi_sq_test(treatment_ = "sanguinea_1")
# Load dataset
data("agitation_tests")
# summarize duration of aggressive behaviour over the experiment
agitation_tests_summary <- group_by(agitation_tests, colony, treatment) %>%
summarise(aggression_duration=sum(aggression_duration)) %>%
left_join(distinct(select(agitation_tests, colony, territory)))
# difference in aggression toward F. polyctena between colonies located within and
# outside rufa territory
x<-filter(agitation_tests_summary, treatment=="F. polyctena", territory=="B")$aggression_duration
y<-filter(agitation_tests_summary, treatment=="F. polyctena", territory=="T")$aggression_duration
cat(sprintf("Median time of aggression of colonies from within and from outside
wood ant territory: %f sec., %f sec., respectively", median(y), median(x)))
wilcox.test(x,y)
# difference in aggression toward F. sanguinea between colonies located within and
# outside rufa territory
x<-filter(agitation_tests_summary, treatment=="F. sanguinea", territory=="B")$aggression_duration
y<-filter(agitation_tests_summary, treatment=="F. sanguinea", territory=="T")$aggression_duration
cat(sprintf("Median time of aggression of colonies from within and from outside
wood ant territory: %f sec., %f sec., respectively", median(y), median(x)))
wilcox.test(x,y)
# difference in aggression toward F. sanguinea and F. polyctena outside territory
sang_res <- filter(agitation_tests_summary, treatment=="F. sanguinea", territory=="B") %>%
select(colony, aggression_duration)
polyctena_res <- filter(agitation_tests_summary, treatment=="F. polyctena", territory=="B") %>%
select(colony, aggression_duration)
res <- left_join(sang_res, polyctena_res, by=c("colony"))
cat(sprintf("Median time of aggression toward F. polyctena and
F. sanguinea: %f sec., %f sec., respectively",
median(res$aggression_duration.y),
median(res$aggression_duration.x)))
wilcox.test(res$aggression_duration.x, res$aggression_duration.y, paired=TRUE)
library(lme4)
library(lmerTest)
library(DHARMa)
model_data <-transform_to_single_val(raw_data = aggression_probing_tests, column = "actual_fus_numb")
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature),
treatment!="sanguinea_20")
aggression_records <- filter(model_data, aggression_num > 0)
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
Test = model_data$test_ID[i]
interval = model_data$time_elapsed[i]
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
model_data <- new_dataset
# temperature transformation: center at zero
model_data$temperature <- model_data$temperature - min(model_data$temperature) + 1
# temperature transformation: normalize standard deviation
sd_temperature <- sd(model_data$temperature)
model_data$temperature <- model_data$temperature/sd_temperature
# fit generalized linear model; use log10 transform of the temperature
mixed.model.activity<-glmer(actual_fus_numb ~ temperature + (1|colony) + territory +
I(log10(time_elapsed)), data=model_data, family="poisson")
summary(mixed.model.activity)
devtools::install()
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set$actual_fus_numb[is.na(second_set$actual_fus_numb)] <- 0
second_set$aggression_num[is.na(second_set$aggression_num)] <- 0
second_set <- split(second_set, second_set$test_ID)
active_fusca <- lapply(second_set, function(x) data.frame(treatment = x$treatment[1],
activity = sum((x$actual_fus_numb + x$aggression_num)>0),
test_ID = x$test_ID[1],
date = x$date[1],
colony = x$colony[1],
territory = x$territory[1]))
aggression_probing_tests <- transform_to_single_val(aggression_probing_tests, column = "actual_fus_numb",mode = 2)
aggression_probing_tests <- transform_to_single_val(aggression_probing_tests, mode = 2)
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set$actual_fus_numb[is.na(second_set$actual_fus_numb)] <- 0
second_set$aggression_num[is.na(second_set$aggression_num)] <- 0
second_set <- split(second_set, second_set$test_ID)
active_fusca <- lapply(second_set, function(x) data.frame(treatment = x$treatment[1],
activity = sum((x$actual_fus_numb + x$aggression_num)>0),
test_ID = x$test_ID[1],
date = x$date[1],
colony = x$colony[1],
territory = x$territory[1]))
active_fusca <- do.call(rbind, active_fusca)
active_fusca[active_fusca$activity==0,]
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set$actual_fus_numb[is.na(second_set$actual_fus_numb)] <- 0
second_set$aggression_num[is.na(second_set$aggression_num)] <- 0
second_set <- split(second_set, second_set$test_ID)
active_fusca <- lapply(second_set, function(x) data.frame(treatment = x$treatment[1],
activity = sum((x$actual_fus_numb + x$aggression_num)>0),
test_ID = x$test_ID[1],
date = x$date[1],
colony = x$colony[1],
territory = x$territory[1]))
active_fusca
active_fusca <- do.call(rbind, active_fusca)
active_fusca
data("aggression_probing_tests")
aggression_probing_tests <- transform_to_single_val(aggression_probing_tests, column = "actual_fus_numb",mode = 2)
aggression_probing_tests <- transform_to_single_val(aggression_probing_tests, mode = 2)
second_set <- filter(aggression_probing_tests, date > as.Date("2018-12-30"))
second_set$actual_fus_numb[is.na(second_set$actual_fus_numb)] <- 0
second_set$aggression_num[is.na(second_set$aggression_num)] <- 0
second_set <- split(second_set, second_set$test_ID)
active_fusca <- lapply(second_set, function(x) data.frame(treatment = x$treatment[1],
activity = sum((x$actual_fus_numb + x$aggression_num)>0),
test_ID = x$test_ID[1],
date = x$date[1],
colony = x$colony[1],
territory = x$territory[1]))
active_fusca <- do.call(rbind, active_fusca)
active_fusca[active_fusca$activity==0,]
