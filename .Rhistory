mixed.model.activity<-glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs) territory +
I(log(time_elapsed)) + I(log(aggression_num+10)),
data=model_data, family = "poisson")
# fit generalized linear model; use log10 transform of the temperature
mixed.model.activity<-glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ territory +
I(log(time_elapsed)) + I(log(aggression_num+10)),
data=model_data, family = "poisson")
set.seed(1010)
sim.resid <- simulateResiduals(mixed.model.activity, n = 1000)
plot(sim.resid)
mixed.model.activity<-glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ territory +
I(log(time_elapsed)) + I(log(aggression_num)),
data=model_data, family = "poisson")
mixed.model.activity<-glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ territory +
I(log(time_elapsed)) + I(log(aggression_num+1)),
data=model_data, family = "poisson")
set.seed(1010)
sim.resid <- simulateResiduals(mixed.model.activity, n = 1000)
plot(sim.resid)
mixed.model.activity<-glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ territory +
I(log(time_elapsed)) + I(log(aggression_num+5)),
data=model_data, family = "poisson")
set.seed(1010)
sim.resid <- simulateResiduals(mixed.model.activity, n = 1000)
plot(sim.resid)
mixed.model.activity<-glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ territory +
I(log(time_elapsed)) + I(log(aggression_num+2)),
data=model_data, family = "poisson")
set.seed(1010)
sim.resid <- simulateResiduals(mixed.model.activity, n = 1000)
plot(sim.resid)
summary(mixed.model.activity)
mixed.model.activity<-glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ territory +
I(log(time_elapsed)) + (aggression_presence),
data=model_data, family = "poisson")
set.seed(1010)
sim.resid <- simulateResiduals(mixed.model.activity, n = 1000)
plot(sim.resid)
mixed.model.activity<-glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ (1|test_ID)+territory +
I(log(time_elapsed)) + (aggression_presence),
data=model_data, family = "poisson")
set.seed(1010)
sim.resid <- simulateResiduals(mixed.model.activity, n = 1000)
plot(sim.resid)
mixed.model.activity<-glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ territory +
I(log(time_elapsed)) + I(log(aggression_num+2)),
data=model_data, family = "poisson")
set.seed(1010)
sim.resid <- simulateResiduals(mixed.model.activity, n = 1000)
plot(sim.resid)
set.seed(1001)
max_activ_data <- data.frame()
max_ac_model_list <-list()
for (i in seq_len(1E2)){
print(i)
model_data <-transform_to_single_val(raw_data = aggression_probing_tests, column = "actual_fus_numb", mode = 4)
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature))
model_data$aggression_presence <- model_data$aggression_num != "0"
model_data <-transform_to_single_val(raw_data = model_data, column = "aggression_num", mode = 4)
# temperature transformation: center at zero
model_data$temperature <- model_data$temperature - min(model_data$temperature) + 1
# temperature transformation: normalize standard deviation
sd_temperature <- sd(model_data$temperature)
model_data$temperature <- model_data$temperature/sd_temperature
model_data$actual_fus_numb2 <- sqrt(model_data$actual_fus_numb + 0)
model_data$obs <- as.factor(1:nrow(model_data))
model_data <- filter(model_data, treatment != "sanguinea_20")
ma_model <- try(glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ territory +
I(log(time_elapsed)) + I(log(aggression_num+2)),
data=model_data, family = "poisson"))
if (class(ma_model)=="try-error"){
print("Model error")
next
}
max_ac_model_list[[length(max_ac_model_list)+1]] <- list()
sim_residuals <-simulateResiduals(ma_model)
diagnostic_tests <- list(testUniformity(sim_residuals, plot = FALSE)$p.value,
testOutliers(sim_residuals, plot = FALSE)$p.value,
testDispersion(sim_residuals, plot = FALSE)$p.value,
testQuantiles(sim_residuals, plot = FALSE)$p.value)
names(diagnostic_tests) <- c("testUniformity", "testOutliers", "testDispersion", "testQuantiles")
max_ac_model_list[[length(max_ac_model_list)]]$glmm_model <- ma_model
max_ac_model_list[[length(max_ac_model_list)]]$diagnostic_tests <- diagnostic_tests
}
warnings()
max_activ_data <- data.frame()
for(i in seq_along(max_ac_model_list)){
max_activ_data <- rbind(max_activ_data, data.frame(c(fixef(max_ac_model_list[[i]]$glmm_model),
max_ac_model_list[[i]]$diagnostic_tests)))
}
colnames(max_activ_data)
diagnostic_pass <- apply(max_activ_data, 1, function(x) all(x[5:8]>0.05))
cat(sprintf("Number of models which passed all diagnostic tests: %d\n",
sum(diagnostic_pass, na.rm = TRUE)))
as.list(summary(max_ac_model_list[[1]]$glmm_model)$coeff[,4]))
as.list(summary(max_ac_model_list[[1]]$glmm_model)$coeff[,4])
as.list(summary(max_ac_model_list[[1]]$glmm_model)$coeff)
(summary(max_ac_model_list[[1]]$glmm_model)$coeff)
model_p_vals <- data.frame()
for (i in seq_len(length(max_ac_model_list))){
model_p_vals <- rbind(model_p_vals, data.frame(as.list(summary(max_ac_model_list[[i]]$glmm_model)$coeff[,4])))
}
p_vals_split <- split(model_p_vals, diagnostic_pass) %>% lapply(function(x) apply(x,2,summary))
p_vals_split$'TRUE'
model_p_vals <- data.frame()
for(i in seq_along(max_ac_model_list)){
model_p_vals <- rbind(model_p_vals, max_ac_model_list[[i]]$p_val)
}
p_vals_split <- split(model_p_vals, diagnostic_pass) %>% lapply(function(x) apply(x,2,summary))
p_vals_split$'TRUE'
p_vals_split
max_ac_model_list[[1]]$p_val
max_ac_model_list <- fusca.defence:::max_ac_model_list
max_ac_model_list[[1]]$p_val
max_ac_model_list[[1]]l
max_ac_model_list[[1]]
summary(max_ac_model_list[[1]]$glmm_model)$coeff[,4]
as.data.frame(summary(max_ac_model_list[[1]]$glmm_model)$coeff[,4])
colnames(as.data.frame(summary(max_ac_model_list[[1]]$glmm_model)$coeff[,4]))
colnames(as.data.frame(t(summary(max_ac_model_list[[1]]$glmm_model)$coeff[,4])))
for(i in seq_along(max_ac_model_list)) max_ac_model_list[[i]]$p_val <- summary(max_ac_model_list)$coeff[,4]
for(i in seq_along(max_ac_model_list)) max_ac_model_list[[i]]$p_val <- summary(max_ac_model_list[[i]]$glmm_model)$coeff[,4]
p_vals_split <- split(model_p_vals, diagnostic_pass) %>% lapply(function(x) apply(x,2,summary))
p_vals_split$'TRUE'
p_vals_split
model_p_vals
model_p_vals <- data.frame()
for(i in seq_along(max_ac_model_list)){
model_p_vals <- rbind(model_p_vals, max_ac_model_list[[i]]$p_val)
}
}
p_vals_split <- split(model_p_vals, diagnostic_pass) %>% lapply(function(x) apply(x,2,summary))
p_vals_split$'TRUE'
model_p_vals <- data.frame()
for(i in seq_along(max_ac_model_list)){
model_p_vals <- rbind(model_p_vals, max_ac_model_list[[i]]$p_val)
}
p_vals_split <- split(model_p_vals, diagnostic_pass) %>% lapply(function(x) apply(x,2,summary))
p_vals_split$'TRUE'
head(model_p_vals)
model_p_vals <- data.frame()
for(i in seq_along(max_ac_model_list)){
model_p_vals <- rbind(model_p_vals, t(max_ac_model_list[[i]]$p_val))
}
p_vals_split <- split(model_p_vals, diagnostic_pass) %>% lapply(function(x) apply(x,2,summary))
p_vals_split$'TRUE'
set.seed(1001)
max_activ_data <- data.frame()
max_ac_model_list <-list()
for (i in seq_len(1E2)){
print(i)
model_data <-transform_to_single_val(raw_data = aggression_probing_tests, column = "actual_fus_numb", mode = 4)
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature))
model_data$aggression_presence <- model_data$aggression_num != "0"
model_data <-transform_to_single_val(raw_data = model_data, column = "aggression_num", mode = 4)
# temperature transformation: center at zero
model_data$temperature <- model_data$temperature - min(model_data$temperature) + 1
# temperature transformation: normalize standard deviation
sd_temperature <- sd(model_data$temperature)
model_data$temperature <- model_data$temperature/sd_temperature
model_data$actual_fus_numb2 <- sqrt(model_data$actual_fus_numb + 0)
model_data$obs <- as.factor(1:nrow(model_data))
model_data <- filter(model_data, treatment != "sanguinea_20")
ma_model <- try(glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ territory +
I(log(time_elapsed)) + I(log(aggression_num+2)),
data=model_data, family = "poisson"))
if (class(ma_model)=="try-error"){
print("Model error")
next
}
max_ac_model_list[[length(max_ac_model_list)+1]] <- list()
sim_residuals <-simulateResiduals(ma_model)
diagnostic_tests <- list(testUniformity(sim_residuals, plot = FALSE)$p.value,
testOutliers(sim_residuals, plot = FALSE)$p.value,
testDispersion(sim_residuals, plot = FALSE)$p.value,
testQuantiles(sim_residuals, plot = FALSE)$p.value)
names(diagnostic_tests) <- c("testUniformity", "testOutliers", "testDispersion", "testQuantiles")
max_ac_model_list[[length(max_ac_model_list)]]$glmm_model <- ma_model
max_ac_model_list[[length(max_ac_model_list)]]$diagnostic_tests <- diagnostic_tests
max_ac_model_list[[length(max_ac_model_list)]]$p_val <- summary(ma_model)$coeff[,4]
}
max_activ_data <- data.frame()
for(i in seq_along(max_ac_model_list)){
max_activ_data <- rbind(max_activ_data, data.frame(c(fixef(max_ac_model_list[[i]]$glmm_model),
max_ac_model_list[[i]]$diagnostic_tests)))
}
diagnostic_pass <- apply(max_activ_data, 1, function(x) all(x[5:8]>0.05))
cat(sprintf("Number of models which passed all diagnostic tests: %d\n",
sum(diagnostic_pass, na.rm = TRUE)))
model_p_vals <- data.frame()
for(i in seq_along(max_ac_model_list)){
model_p_vals <- rbind(model_p_vals, t(max_ac_model_list[[i]]$p_val))
}
p_vals_split <- split(model_p_vals, diagnostic_pass) %>% lapply(function(x) apply(x,2,summary))
p_vals_split$'TRUE'
devtools::load_all()
data("aggression_probing_tests")
head(aggression_probing_tests)
?glm
summarize_test <- function(test_ID, data = aggression_probing_tests){
test_data <- agression_probing_test[agression_probing_test$test_ID == test_ID,]
test_data <- transform_to_single_val(test_data, mode = 4)
data.frame(colony = test_data$colony[1],
territory = test_data$territory[1],
aggression_num = max(test_data$aggression_num),
treatement = test_data$treatment[1])
}
summarized_data <- data.frame()
for (test_ID in unique(aggression_probing_tests$test_ID)){
summarized_data <- rbind(summarized_data, summarize_test(test_ID))
}
head(aggression_probing_tests)
summarize_test <- function(test_ID, data = aggression_probing_tests){
test_data <- aggression_probing_test[aggression_probing_test$test_ID == test_ID,]
test_data <- transform_to_single_val(test_data, mode = 4)
data.frame(colony = test_data$colony[1],
territory = test_data$territory[1],
aggression_num = max(test_data$aggression_num),
treatement = test_data$treatment[1])
}
summarized_data <- data.frame()
for (test_ID in unique(aggression_probing_tests$test_ID)){
summarized_data <- rbind(summarized_data, summarize_test(test_ID))
}
summarize_test <- function(test_ID, data = aggression_probing_tests){
test_data <- aggression_probing_tests[aggression_probing_tests$test_ID == test_ID,]
test_data <- transform_to_single_val(test_data, mode = 4)
data.frame(colony = test_data$colony[1],
territory = test_data$territory[1],
aggression_num = max(test_data$aggression_num),
treatement = test_data$treatment[1])
}
summarized_data <- data.frame()
for (test_ID in unique(aggression_probing_tests$test_ID)){
summarized_data <- rbind(summarized_data, summarize_test(test_ID))
}
summarized_data
summarize_test <- function(test_ID, data = aggression_probing_tests){
test_data <- aggression_probing_tests[aggression_probing_tests$test_ID == test_ID,]
test_data <- transform_to_single_val(test_data, mode = 4)
data.frame(colony = test_data$colony[1],
territory = test_data$territory[1],
aggression_num = max(na.omit(test_data$aggression_num)),
treatement = test_data$treatment[1])
}
summarized_data <- data.frame()
for (test_ID in unique(aggression_probing_tests$test_ID)){
summarized_data <- rbind(summarized_data, summarize_test(test_ID))
}
summarized_data
data(package = "fusca.defence")
data("head_widht")
data("head_width")
head(head_width)
library(dplyr)
library(lubridate)
summarized_data <- left_join(head_width, summarized_data)
summarized_data$aggression_presence <- summarized_data$aggression_num > 0
logistic_regress<-glm(aggression_presence~head_width+territory+treatment,data=summarized_data, family="binomial")
colnames(summarized_data)
summarize_test <- function(test_ID, data = aggression_probing_tests){
test_data <- aggression_probing_tests[aggression_probing_tests$test_ID == test_ID,]
test_data <- transform_to_single_val(test_data, mode = 4)
data.frame(colony = test_data$colony[1],
territory = test_data$territory[1],
aggression_num = max(na.omit(test_data$aggression_num)),
treatment = test_data$treatment[1])
}
summarized_data <- data.frame()
for (test_ID in unique(aggression_probing_tests$test_ID)){
summarized_data <- rbind(summarized_data, summarize_test(test_ID))
}
summarized_data <- left_join(head_width, summarized_data)
summarized_data$aggression_presence <- summarized_data$aggression_num > 0
logistic_regress<-glm(aggression_presence~head_width+territory+treatment,data=summarized_data, family="binomial")
summary(logistic_regress)
logistic_regress<-glmer(aggression_presence~head_width+territory+treatment+ (1|colony),
data=summarized_data, family="binomial")
summary(logistic_regress)
sim_residuals <-simulateResiduals(ma_model)
plot(sim_residuals)
sim_residuals <-simulateResiduals(logistic_regress)
plot(sim_residuals)
logistic_regress<-glmer(aggression_presence~head_width+territory*treatment+ (1|colony),
data=summarized_data, family="binomial")
summary(logistic_regress)
logistic_regress<-glm(aggression_presence~head_width+territory*treatment,
data=summarized_data, family="binomial")
summary(logistic_regress)
logistic_regress<-glmer(aggression_presence~head_width+territory*treatment+ (1|colony),
data=summarized_data, family="binomial")
summary(logistic_regress)
logistic_regress<-glmer(aggression_presence~head_width+territory+treatment+ (1|colony),
data=summarized_data, family="binomial")
logistic_regress<-glm(aggression_presence~head_width+territory+treatment,
data=summarized_data, family="binomial")
summary(logistic_regress)
model_data <-transform_to_single_val(raw_data = aggression_probing_tests, column = "actual_fus_numb", mode = 4)
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature))
model_data$aggression_presence <- model_data$aggression_num != "0"
model_data <-transform_to_single_val(raw_data = model_data, column = "aggression_num", mode = 4)
# temperature transformation: center at zero
model_data$temperature <- model_data$temperature - min(model_data$temperature) + 1
# temperature transformation: normalize standard deviation
sd_temperature <- sd(model_data$temperature)
model_data$temperature <- model_data$temperature/sd_temperature
model_data$actual_fus_numb2 <- sqrt(model_data$actual_fus_numb + 0)
model_data$obs <- as.factor(1:nrow(model_data))
model_data <- filter(model_data, treatment != "sanguinea_20")
mixed.model.activity<-glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ territory +
I(log(time_elapsed)) + I(log(aggression_num+2)),
data=model_data, family = "poisson")
summary(mixed.model.activity)
mixed.model.activity<-glmer(actual_fus_numb ~ I((temperature)) + (1|colony) + (1|obs)+ territory*treatment +
I(log(time_elapsed)) + I(log(aggression_num+2)),
data=model_data, family = "poisson")
mixed.model.activity<-lmer(actual_fus_numb2 ~ temperature + (1|colony) + territory*treatment +
I(log(time_elapsed)) + I(log(aggression_num+1)), data=model_data)
summary(mixed.model.activity)
mixed.model.activity<-lmer(actual_fus_numb2 ~ temperature + (1|colony) + territory+treatment +
I(log(time_elapsed)) + I(log(aggression_num+1)), data=model_data)
summary(mixed.model.activity)
devtools::load_all()
library(dplyr)
library(lubridate)
data(agitation_tests)
data(aggression_probing_tests)
library(lme4)
library(lmerTest)
library(DHARMa)
summarize_test <- function(test_ID, data = aggression_probing_tests){
test_data <- aggression_probing_tests[aggression_probing_tests$test_ID == test_ID,]
test_data <- transform_to_single_val(test_data, mode = 4)
data.frame(colony = test_data$colony[1],
territory = test_data$territory[1],
aggression_num = max(na.omit(test_data$aggression_num)),
treatment = test_data$treatment[1])
}
summarized_data <- data.frame()
for (test_ID in unique(aggression_probing_tests$test_ID)){
summarized_data <- rbind(summarized_data, summarize_test(test_ID))
}
data(head_width)
summarized_data <- left_join(head_width, summarized_data)
summarized_data$aggression_presence <- summarized_data$aggression_num > 0
library(lme4)
library(purrr)
library(lmerTest)
library(DHARMa)
logistic_regress<-glm(aggression_presence~head_width+territory*treatment,
data=summarized_data, family="binomial")
summary(logistic_regress)
logistic_regress<-glmer(aggression_presence~head_width+territory+treatment+ (1|colony),
data=summarized_data, family="binomial")
logistic_regress<-glm(aggression_presence~head_width+territory+treatment,
data=summarized_data, family="binomial")
summary(logistic_regress)
model_data <-transform_to_single_val(raw_data = aggression_probing_tests, column = "actual_fus_numb")
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature),
treatment!="sanguinea_20")
aggression_records <- filter(model_data, aggression_num > 0)
aggression_tests <- unique(aggression_records$test_ID)
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
model_data <-transform_to_single_val(raw_data = aggression_probing_tests, column = "actual_fus_numb")
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature),
treatment!="sanguinea_20")
aggression_records <- filter(model_data, aggression_num > 0)
aggression_tests <- unique(aggression_records$test_ID)
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
data("aggression_probing_tests")
model_data <-transform_to_single_val(raw_data = aggression_probing_tests, column = "actual_fus_numb")
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature),
treatment!="sanguinea_20")
aggression_records <- filter(model_data, aggression_num > 0)
aggression_tests <- unique(aggression_records$test_ID)
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
model_data <-transform_to_single_val(raw_data = aggression_probing_tests, column = "actual_fus_numb")
devtools::load_all()
model_data <-transform_to_single_val(raw_data = aggression_probing_tests, column = "actual_fus_numb")
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature),
treatment!="sanguinea_20")
aggression_records <- filter(model_data, aggression_num > 0)
aggression_tests <- unique(aggression_records$test_ID)
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
model_data <-transform_to_single_val(raw_data = aggression_probing_tests, column = "actual_fus_numb")
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature),
treatment!="sanguinea_20")
aggression_records <- filter(model_data, aggression_num > 0)
aggression_tests <- unique(aggression_records$test_ID)
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
Test = model_data$test_ID[i]
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
model_data <-transform_to_single_val(raw_data = aggression_probing_tests, column = "actual_fus_numb")
# treatment sanguinea_20 should be removed due to significantly lower fusca activity
model_data<-filter(model_data, territory %in% c("B","T"),
date > as.Date("2016-12-30"),
date < as.Date("2020-12-30"),
!is.na(temperature),
treatment!="sanguinea_20")
aggression_records <- filter(model_data, aggression_num > 0)
aggression_tests <- unique(aggression_records$test_ID)
new_dataset<-data.frame()
for(i in 1:nrow(model_data)){
Test = model_data$test_ID[i]
interval = model_data$time_elapsed[i]
# include experiments with no aggression
if (!(Test %in% aggression_records$test_ID)){
new_dataset <- rbind(new_dataset, model_data[i,])
next
}
# include experiment part before aggression occurred
reference_set <- filter(aggression_records, test_ID == Test)
if (all(interval < reference_set$time))
new_dataset<-rbind(new_dataset, model_data[i,])
}
new_dataset
new_dataset$aggression_presence <- new_dataset$test_ID %in% aggression_tests
model_data <- new_dataset
# temperature transformation: center at zero
model_data$temperature <- model_data$temperature - min(model_data$temperature) + 1
# temperature transformation: normalize standard deviation
sd_temperature <- sd(model_data$temperature)
model_data$temperature <- model_data$temperature/sd_temperature
# fit generalized linear model; use log10 transform of the temperature
mixed.model.activity<-glmer(actual_fus_numb ~ temperature + (1|colony) + territory +
I(log10(time_elapsed)) + aggression_presence, data=model_data, family="poisson")
summary(mixed.model.activity)
